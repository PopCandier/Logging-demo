<?xml version="1.0" encoding="utf-8" ?>
<!--
    scan ：如果此属性设置为true，配置文件如果发生变化，将会被重新加载，默认是true
    scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
    当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!--设置上下文名称
        每个logger都关联到logger上下文，
        默认上下文名称为default。但可以使用设置成其它名字，用于
        区别不同应用程序的记录。一旦设置就不能修改，通过
        %contextName 来打印日志上下文名称，一般来说
        我们不用这个属性，可有可无
    -->
    <contextName>logback</contextName>

    <!--
        用来定义变量值的标签，有两个属性，name和value
        其中name的值是变量的名称，value的值是用变量定义的值。
        通过定义的值会被插入到logger上下文中。定义变量后，
        可以使 "${}"来使用变量
    -->
    <property name="logback.logdir" value="./logdir/" />
    <property name="logback.appname" value="logDemo" />

    <!--
        appender
        appender 用来格式化日志输出节点，有两个属性
        name和class，class用来指定那种输出策略，常用
        就是控制台输出策略和文件输出策略。
    -->
    <!--
        控制台输出 ConsoleAppender
    -->
    <appender name="consoleLog1" class="ch.qos.logback.core.ConsoleAppender">
        <!--展示格式 layout-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d %contextName -Pop -> %msg%n</pattern>
        </layout>
    </appender>
    <!-- 控制台输出 的第二种形式-->
    <appender name="consoleLog2" class="ch.qos.logback.core.ConsoleAppender">
        <!--展示格式 layout-->
        <encoder>
            <pattern>%d %contextName -Pipi -> %msg%n </pattern>
        </encoder>
    </appender>

    <!--
        root 节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
        默认是DEBUG。可以包含零个或多个元素，标识这个appender将会添加到这个loger
    -->
    <root level="debug">
        <appender-ref ref="consoleLog1" />
        <appender-ref ref="consoleLog2" />
    </root>
</configuration>